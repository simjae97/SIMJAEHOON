/*  

        자료형
        0.undefinded:자료없음 
        1.숫자형 2.문자열 3.불 
        4.배열[] :여러개의 자료를 하나로 묶은 자료의 집합
            -성질,상태,필드 = 현재 데이터의 상태
        5.함수(){} :코드의 집합
            -기능,행위,이벤트,메소드
        6.객체{}

        함수
            -언제 어떤 함수를 사용하는지는 정해져있음.    
            -용어
                -함수호출:함수 호출할때: f(x)
                
                
                -매개변수:함수 호출할때 괄호 내부에 여러가지 자료를 넣을때 = 인수
                    -변수,상수,함수,객체,배열 == 자료
                
                -리턴값:함수호출해서 최종적으로 나오는 결과 = 반환 return

            -종류
                1. 매개변수o 리턴o
                    function 함수(x,y){z= x+y; return z;}
                2. 매개변수 o 리턴x
                    fuction 함수(x,y){z=x+y;}
                3. 매개변수 x 리턴o
                    function 함수(){ return 3+3}
                4. 매개변수x 리턴x
                    function 함수(){}
            
            함수 사용의 이점
                1.반복되는 코드를 한번에 정의하고 필요에 따라 호출해서 반복 작업을 피할수 있다.
                2.긴 프로그램을 기능별로 나눠 여러 함수로 나눠 작성하면 모듈화[조각 단위]로 전체 코드의 가독성이 좋아짐.
                3.기능별로 수정이 가능하므로 유지보수가 쉽다.
                규모가 작으면 큰 의미 없음.    
                
            -1.익명함수: 이름이 없는 함수.
                // -function(){} : ㅎ함수에 이름이 없어서 호출이 불가능.
                // - 익명함수를 변수/상수에 넣으면 변수/함수 호출시 함수가 실행

            -2.선언적함수 : 이름이 있는 함수.
                function 함수명(매개변수){}: 함수에 이름이 있는 상태.

 */



// p.197 : *익명함수
    // -function(){} : ㅎ함수에 이름이 없어서 호출이 불가능.
    // - 익명함수를 변수/상수에 넣으면 변수/함수 호출시 함수가 실행

// 함수 선언부//
const 함수 = function(){
    // 함수 내부
    console.log("함수 내부의 코드입니다...1");
    console.log("함수 내부의 코드입니다...2");
    console.log("함수 내부의 코드입니다...3");
}

함수(); //함수 호출
함수(); // 함수 또 호출 
//함수2(): //오류나옴,함수2는 정의되지 않았음
console.log(typeof 함수) //자료형 확인 : function
console.log(함수); 

// p.199 선언적 함수

function 선언함수(){
    console.log("함수 내부의 코드입니다...1");
    console.log("함수 내부의 코드입니다...2");
    console.log("함수 내부의 코드입니다...3");
    console.log("");
}

선언함수();
선언함수();

console.log(typeof 선언함수)
console.log(선언함수)

function f(x){
    return x+x;
}

console.log(f(3));