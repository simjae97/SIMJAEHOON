JAVA vs JAVAScript : 다름
JS로 할 수 있는것
	1.웹 클라이언트[HTML,CSS,JS]
	---------------2009년 node.js이후--------------------------
	2.웹 서버[node.js] vs JAVA(spring)	
	3.모바일[react native] 
	4.데스크탑 애플리케이션[NW.js] vs JAVA(spring)
	5.DB 관리[NOSQL] vs sql
text editor
	프론트엔드	:VScode,아톰,(회사자유)
	백엔드		:이클립스,intelli j
브라우저[클라이언트 입장]
	크롬,엣지,사파리

기본용어
	부호				:모스부호(짧음/김 신호) -> 전기상태(ON/OFF) -> 이진법(1/0)
	코드				:정보를 다른 형태로 변환하는 규칙[문법/도구]
						[JAVA , HTML, CSS, JS, PYTHON]
	표현식				:하나 이상의 값/정보 으로 표현될 수 있는 코드를 의미
	문장				:표현식이 한개 이상 모인것(명령문)
	프로그램			:문장이 모인것(명령문의 집합)
	프로세스			:현재 실행중인 프로그램(스레드/스케쥴링)
	웹 애플리케이션		:웹에서 사용하는 프로그램
	응용프로그램		:사용자가 사용할 수 있는 프로그램


															 -> 웹 애플리케이션(프로세스)
	부호 -> 코드 -> 표현식 -> 문장 -> 프로그램    사용처에 따라 -> 앱 애플리케이션(프로세스)
															 ->	데스크탑 애플리케이션(프로세스)


개발자/사람																	컴퓨터
<div>====================명령어===================================>[번역]101010101010111

박스모델	<===================실행결과=========================

console.log("안녕")==================명령어=================>[번역]1110111011

안녕		<=========================실행결과================

키워드 : 언어들이 미리 만든단어들
	키워드와 동일한 식별자 사용 x

식별자: 어떠한 변수/함수등을 식별하기 위한 이름
	html/css= id, class, <마크업>
	js:변수/함수/클래스
	1.키워드 사용x
	2.숫자시작x
	3.블랭크사용x
	4.특수문자는 _와 $만 사용
	5.왠만하면 영어 권장(camel표기법),의미있는 이름사용

주석: 코드 설명, 협업에서 안내/설명
	html: <!--dd-->
	css: /*dd*/
	js:
		1. //한줄주석
		2. /*여러줄 주석*/
html에서 JAVAScript적용하는 방법
	-js파일만 가지고 실행x, 브라우저는 HYPERTEXT만 전송 가능, 따라서 HTML에 얹어감
	(단 node.js는 이야기가 다름)
	1. <script> 마크업을 이용한 스크립트 작성
	2.<head>또는 <body>가장 하단에 <script>마크업에 .js파일을 불러오기

1.입출력 방법[*2,6]
	1.alert("문구")					:경고창(확인버튼) 출력 함수
	2.console.log("hello world"); 	:console (개발자도구) 출력함수
	3.confirm("hello world3"); 		:확인창(확인=true/취소=false) 출력 함수
	4.prompt("hello world4")		:입력상자(input, 확인=true/취소=false) 입력함수
	5.document.write("hello world5"); 	:html에 출력 함수
	6.document.특정식별자.html=			:특정요소/마크업에 출력 함수

2. 기본 자료형
	-자료: 프로그램이 처리할 수 있는 모든것
	-자료형: 자료 형태/모양/등 나눠 놓은 것->효율성(메모리효율)
	1.숫자(number),2문자열(string),3.불(boolean) 4.undefined
	숫자
		1.숫자와 문자열 구분
			273vs"273"은 다르다
	불
		0 or 1
	문자열
		1.문자열 표기방법: '문자열' or "문자열"
		주의할점: 1.'문자열" 불가능
					2." 'ㅇㅇ'" 가능
					' "ㅇㅇ" ' 가능
					3.``(백틱) 가능
		2.이스케이프/제어 문자
			1.\n : 줄바꿈
			2.\t : 들여쓰기
			3.\\ : \출력
			그외에 \" ,\n 연산자 출력시

		3.문자열 연산자
			+: 문자열 연결 연산자["문자열"+"문자열"]
			[인덱스]:문자열에서 인덱스(순서)번째 문자 출력(0번부터 시작)

		length:문자열 내 문자 개수
				"안녕하세요".length : 해당 문자열내 문자 개수->5
3.연산자[연산/계산/논리 시 사용되는 특수문자]
	1.산술 연산자: 결과값 반환
		+더하기 -빼기 *곱하기 /나누기(몫) %나머지
		몫 구하기
		parseInt(실수):정수로 변환
		1씩 더하기
		a = a+1
		a += 1
		a++
		++a
	2.연결 연산자: + 연결연산자
		숫자+숫자 :더하기
		숫자+"문자열":안됨
		"문자열"+"문자열"[연결]
		"문자열"+변수[연결]
	3. 비교연산자: 비교후 true or false
		>초과		<미만
		>= 이상		<=이하
		==같다[데이터비교]	===[데이터/자료형 비교(자바엔없음)]
		!=같지않다		!==같지않다
	4. 관계 연산자: 주로 비교연산자를 2개이상일떄 사용 true or false
		&&  and 연산자
		||  or 연산자
		!  not 연산자
	
	비트연산
	& and
	| or
	^ xor

and				or			not		xor
	1	0		1	0				1	0
1	1	0		1	1		0		0	1

0	0	0		1	0		1		1	0


	5.증감연산자: 1증감
	전위 ++a --a : 값을 +-1한 후 변수에 대입
	후위 a++ --a: 값을 변수에 대입 한 후 +-1

	6.대입연산자:오른쪽 데이터를 왼쪽에 넣어주기
		= 대입
		+= 오른쪽데이터를 왼쪽 데이터에 더한값을 대입
		-= /= *= %= 등등...
연산관련 함수
	parseInt(): 정수
	Number():숫자변경
	typeof():타입 확인
	String():문자자료형으로 변환 함수
	Boolean():불 자료형으로 변환 함수
	isNaN(자료):만약 자료가 number이면 false, 아니면 true

-문자열 관련된 함수들
	1. 문자열.length 						:문자열 길이
	2. 문자열.split("분리기준 문자")		:분할 기준 문자 기준으로 분리된 자료들을 배열로 반환
	7.삼항 연산자:
		조건? 참:거짓
		1==1 ? 2: 3 => 2 출력
			조건: 비교/관계 연산자
			참: true대신 하고싶은 코드
			거짓: false대신 하고싶은 코드


.템플릿 문자열
	백틱을 이용한 문자열과 데이터 표현
	1.전체를 `백틱으로 감싼다.
	2.데이터를 표현할 위치에 ${데이터}

-상수와 변수
	메모리: 주 기억장치(Random Access Memory), 보조기억장치(Read Only Memory)
		-컴퓨터가 데이터를 저장하는 공간

	-개발자 하드웨어에 직접적으로 메모리에 저장 할 수가 없다. {소프트웨어는 하드웨어 사용권한이 없다}

	프로그래밍언어들은 개발자를 위해서 하드웨어 값을 지정할 수 있도록 만들어짐
	
	반복사용하기 위해 저장
		상수/변수: 1개의 자료를 저장하고 있는 상자

	상수:항상 같은 수
		-한번 값을 넣으면 수정 할 수 없습니다.
		-const:상수 선언에는 의미를 담고 있는 키워드와
	변수: 변할 수 있는 수
		-값을 계속 변경 할 수 있습니다.
	
	변수/상수 만들기
		1 .키워드 : const , let
		2.식별이름: 변수/상수명 정하기[중복x]
		3.=대입
		4.초기값
	
	변수/상수의 호출[호출시의 let,const사용 x]
		변수/상수명작성시 변수또는 상수에 저장된 값 반환

	변수 값 변경
		변수 = 새로운값 (상수는 변경 불가)

	변수/상수 값 연산
		변수/상수 +10

제어문(조건문)
	-주어진 조건의 만족 여부에 따라 선택적으로 실행하고자 할때 사용
	-형태
	1참일때만
		if(조건){}
	PYTHON
		if 조건 :
	2.참/거짓
		if(조건){
		}
		else{
		}
	3.중첩
		if(조건){
			if(조건){}
			else
		}
	4.다수조건
		if(조건){}
		else if(조건){}
		else if(조건){}
		else
		조건만족에 따라 {}한번만 실행
		vs-------------------------
		조건 만족에 따라 {}여러번 실행
		if(){}
		if(){}
		if(){}

		
	2.switch
		switch(변수){
			case 0:
			break;
			
		}
		-default, break;

제어문(반복문)
	1.
		for문
		for(초기값 ; 조건문 ; 증감식){
			실행코드
		}
		for in문: 배열내 요소의 인덱스 하나씩 순서대로 반복변수 대입
		for(반복변수 in 배열명){}

		for of문: 배열내 요소의 밸류를 하나씩 순서대로 반복변수 대입
		for (반복변수 of 배열명){}


		while문
		//-주로 무한루프에서 사용
		초기값선언
		while(조건문){실행코드;증감식;}

		무한루프
			1.while(true){}
			2.for(;;){}
			break : 가장 가까운 {반복문} 탈출 후 반복문 종료
			continue: 가장 가까운 반복문 탈출 후 반복문 다음루프(증감식부터)로 진행 
	2.실행순서
		1.초기값
		2.조건문
		[참이면] 3.실행코드 -> 4증감식 -> 2조건문
		[거짓이면] 종료



-키워드
	break : switch, 반복문(for,while) {}탈출
	return : 함수{} 탈출/종료

 배열: 여러개의 자료를 묶어서 하나의 자료[]로 만들어주는 문법
        형태
            1.배열선언
                -let 변수/상수명 =[요소,요소,요소]
                -요소란? 배열내 들어간 자료(1.숫자 2.불 3.문자열 4.배열 5.함수 6.객체)
            2.배열 요소에 접근
                인덱스= 배열내 요소들이 저장된 순서번호
                0부터 시작 (length/size는 1부터 시작)
            3.배열.length = 배열 크기

            4. 배열 뒷부분에 요소 추가하기
                배열.push -->배열의 길이 리턴
                배열.splice(중간삽입할 요소의 인덱스위치,0,추가할 요소의 값)
            
            5.배열 요소 제거하기
                배열.splice(제거할 요소의 인덱스, 제거할 요소의 개수)
                    -배열.splice(0):배열 요소 전체 삭제,제거할 요소의 개수를 안 적었을경우 제거할 요소의 인덱스 뒤로 전부 삭제
                
                배열.splice(배열.indexOf(값),1)
            6.배열 내 특정 값의 위치 찾기
                배열.indexOf(값);
                    -배열 내 동일한 값이 있으면 인덱스번호 반환 없으면 -1

        -[]사용
        -내부값을 ,로 구분
        -내부값을 요소[element]
    str[str.length-1] : 마지막 인덱스

    식별:데이터검색, 인덱스(순서)	


-지역변수 특징
	-선언된 위치{}에 따라 변수 사용 여부 판단.
		1.{}안에서 선언된 변수/상수는 해당 {}밖에서 사용불가능
		2.{}안에서 선언된 변수/상수는 해당 {}안에있는 하위 {}안에는 들어갈수있다.

DOM(문서 document 객체 Objeck 모델Model)객체
	1.document		:html	-(.js는 항상 html안에 존재한다)
		제공하는 함수
		1.document.querySelector("선택자") - #id,.class,마크업

		속성
		.value								input , select , textarea..입력태그
		.innerHTML:							div, ul , span,table,h...입력태그 외

	1.html전체를 호출한다.
		const htmlObj = document;
	2.html 중에서 input 1개 호출
		const inputObj = document.querySelector('input');
	3.html 중에서 input의 입력된 value 호출
		const inputValue = document.querySelector('input').value;